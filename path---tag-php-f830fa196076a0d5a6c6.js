webpackJsonp([0xcaf0c322f2dc],{686:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Kostas Bariotis' Blog",description:"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.",siteUrl:"https://kostasbariotis.com"}}},pathContext:{posts:[{excerpt:"The past few weeks, you would find Validation at  Github's PHP Trending projects. Validation  is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away. Here is a great list why…",html:'<p>The past few weeks, you would find Validation at <a title="Github PHP Trending Projects" href="https://github.com/trending?l=php" target="_blank">Github\'s PHP Trending projects.</a></p>\n<p><a title="Respect/Validation on Github" href="https://github.com/Respect/Validation" target="_blank">Validation</a> is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away.</p>\n<p>Here is a great list why this library it\'s actually awesome.</p>\n<p>From <a title="Respect/Validation on Reddit" href="http://www.reddit.com/r/PHP/comments/1telis/respectvalidation_the_most_awesome_validation/ce7emzs" target="_blank">Reddit</a>:</p>\n<blockquote>\n<ul>\n\t<li>The chain is not a simple chain (it is not just linear), it is a fluent builder for a composite structure. You can write almost any validation rule for any data structure and group it in a single object✌️:key("name", v::string()-&gt;length(1, 32)) -&gt;key("birth", v::date(\'Y-m-d\')-&gt;minimumAge(18)) -&gt;assert($someArrayWithData);</li>\n\t<li>You can nest as many validators as you want.</li>\n\t<li>Each validator is an instance that you can reuse (even for composing new, more complex instances).</li>\n\t<li>Three kinds of validation reports (validate() returns true/false, check() stops on first error, assert() collect all errors).</li>\n\t<li>Nested reports implement RecursiveIteratorIterator AND RecursiveTreeIterator (that\'s where the ASCII tree report came from!)</li>\n\t<li>A selector API for finding messages in complex nested reports (findMessages(["user.address.street.length"])).</li>\n\t<li>Reports are only generated when needed (true/false validation doesn\'t even touch the reporting system).</li>\n\t<li>Really easy to extend (most rules have a single method).</li>\n\t<li>Really easy to make inline rules✌️:callback(function ($input) { return $input == 42; });</li>\n\t<li>Logic operations on any validator✌️:allOf(v::numeric(), v::hexa(), v::min(1)); // numeric, hexadecimal and at least 1 v::oneOf(v::nullValue(), v::numeric()); // null or numeric</li>\n\t<li>Integrates with ZF1, ZF2 and Symfony2 validators if needed. Dependency is optional.</li>\n\t<li>A full concrete API (not relying on magic methods or chains) that can be built using dependency injection.</li>\n\t<li>Straightforward to use on unit tests instead of the PHPUnit assertion library.</li>\n</ul>\n</blockquote>\nHere i wrote a simple User Model class where we can make our validation:\n<p><a href="https://gist.github.com/stakisko/dfba7e1b576954232cd5" target="_blank" rel="noreferrer noopener">https://gist.github.com/stakisko/dfba7e1b576954232cd5</a></p>\n<p>Validation will throw an exception when it fail and you can inform your users.</p>',id:"/home/travis/build/kbariotis/kostasbariotis.com/blog/valiation-the-most-awesome-validation-engine-ever-created-for-php/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2014-10-08T16:02:59.000Z",path:"/valiation-the-most-awesome-validation-engine-ever-created-for-php/",tags:"php, validation, oop",title:"Valiation : The most awesome validation engine ever created for PHP",draft:null}},{excerpt:"https://github.com/vlucas/phpdotenv For a while now, i've been using  Symfony's YAML  to add a configuration file on my PHP projects. Today, i stumbled upon  Vance Lucas's  PHPDotEnv which is a great PHP package that will transfer the contents of a…",html:'<p><a href="https://github.com/vlucas/phpdotenv" target="_blank">https://github.com/vlucas/phpdotenv</a></p>\n<p>For a while now, i\'ve been using <a title="Symfony\'s YAML Component" href="http://symfony.com/doc/current/components/yaml/introduction.html" target="_blank">Symfony\'s YAML</a> to add a configuration file on my PHP projects.</p>\n<p>Today, i stumbled upon <a title="Vance Lucas" href="http://vancelucas.com/" target="_blank">Vance Lucas\'s</a> PHPDotEnv which is a great PHP package that will transfer the contents of a .env file right inside your PHP\'s $<em>ENV variable. Available through &#x3C;a title="PHP Composer" href="<a href="http://getcomposer.org" target="_blank" rel="noreferrer noopener">http://getcomposer.org</a>" target="</em>blank">Composer</a> too.</p>\n<p>Easiest method to add configuration files to your PHP projects ever!</p>',id:"/home/travis/build/kbariotis/kostasbariotis.com/blog/add-configuration-file-to-your-php-projects/index.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{date:"2014-08-31T10:01:38.000Z",path:"/add-configuration-file-to-your-php-projects/",tags:"php",title:"Add configuration file to your PHP Projects",draft:null}}],tag:"php",pagesSum:1,page:1}}}});
//# sourceMappingURL=path---tag-php-f830fa196076a0d5a6c6.js.map