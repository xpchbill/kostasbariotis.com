{"version":3,"sources":["webpack:///path---tag-team-12496c9c5b673dfe69e8.js","webpack:///./.cache/json/tag-team.json"],"names":["webpackJsonp","704","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","tag","pagesSum","page"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,4LAAAC,QAAA,gCAAmRC,aAAgBC,QAAUC,QAAA,kJAAAC,KAAA,kZAAAC,GAAA,uJAAAC,WAAA,EAAAC,aAA2vBC,KAAA,2BAAAC,KAAA,wDAAAC,KAAA,mBAAAZ,MAAA,sDAAAa,MAAA,QAAyMR,QAAA,6PAAAC,KAAA,23QAAkuLC,GAAA,qHAAAC,WAAA,EAAAC,aAA+vGC,KAAA,2BAAAC,KAAA,sBAAAC,KAAA,8BAAAZ,MAAA,iCAAAa,MAAA,QAA6JR,QAAA,8PAAAC,KAAA,gjPAAu4PC,GAAA,wIAAAC,WAAA,EAAAC,aAAuPC,KAAA,2BAAAC,KAAA,yCAAAC,KAAA,iCAAAZ,MAAA,uCAAAa,MAAA,QAAuLC,IAAA,OAAAC,SAAA,EAAAC,KAAA","file":"path---tag-team-12496c9c5b673dfe69e8.js","sourcesContent":["webpackJsonp([268644701030022],{\n\n/***/ 704:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Admin Pisoni  shares lots of great insights he learned after all these years into managing and growing teams. This article says it all. Article\",\"html\":\"<p><a href=\\\"https://www.linkedin.com/in/adam-pisoni-12340b1\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Admin Pisoni</a> shares lots of great insights he learned after all these years into managing and growing teams. This article says it all.</p>\\n<p><a href=\\\"http://firstround.com/review/the-keys-to-scaling-yourself-as-a-technology-leader/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Article</a></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/the-keys-to-scaling-yourself-as-a-technology-leader/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-03-30T09:24:53.000Z\",\"path\":\"/the-keys-to-scaling-yourself-as-a-technology-leader/\",\"tags\":\"Management, team\",\"title\":\"The Keys to Scaling Yourself as a Technology Leader\",\"draft\":null}},{\"excerpt\":\"Fortunately, I have been lucky enough to work with a lot of dev teams.  Good  and bad. I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets  you up in the morning  while looking forwardâ€¦\",\"html\":\"<p>Fortunately, I have been lucky enough to work with a lot of dev teams. <a href=\\\"http://www.lifehack.org/articles/work/10-signs-you-are-working-happy-workplace.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Good</a> and bad.</p>\\n<p>I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets <a href=\\\"http://www.leadertoleaderjournal.com/sample-articles/the-importance-of-happiness-in-the-workplace.aspx\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">you up in the morning</a> while looking forward to meet your colleagues.</p>\\n<p>But that team that keeps you in being that place and continue working with them, didn't happen accidentally. Someone created it. This is my list for a happy and efficient development team. Cause these two are tied together and evolving along side.</p>\\n<h3 id=\\\"coding-style-guide\\\"><a href=\\\"#coding-style-guide\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Coding Style Guide</h3>\\n<p>is the new RFC. Force everyone to <a href=\\\"https://github.com/airbnb/javascript\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">be in the same page</a>. As in every other social team, so and your team must <a href=\\\"https://github.com/google/styleguide\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">meet rules</a> and follow them for the common good.</p>\\n<p>Everyone should write the same code. Otherwise, you'll end up with a huge code base that no one can understand, leave aside to scale it.</p>\\n<h3 id=\\\"git---git-flow\\\"><a href=\\\"#git---git-flow\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Git &#x26;  Git flow</h3>\\n<p>or <a href=\\\"http://nvie.com/posts/a-successful-git-branching-model/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">in other words</a>. Now, this is the first and the last time I'm talking about this. If you don't keep your code under some kind of version control, there is nothing much left for you.</p>\\n<p>Version controlling your code means that you keep history of every file change, every line addition and deletion. Jumping from the present to a certain point of past, that you know your code was working will save you tone of hours of frustration and money.</p>\\n<h3 id=\\\"dev-environments\\\"><a href=\\\"#dev-environments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dev Environments</h3>\\n<p>that simulates the live project. You make changes to the live site? No, it's not normal. No, no one does this any more. What it takes to be able to deliver the best to our clients? Is to test it for them, before them.</p>\\n<p>Make sure you can make a change to your project, or a replica of it, and be able to reproduce any sort of abnormality you can before it goes live.</p>\\n<h3 id=\\\"automation\\\"><a href=\\\"#automation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Automation</h3>\\n<p>is key. He/She who has ever worked at a fast grown company, knows that speed is priority. But keep doing the same process over and over again  can't be efficient. Find those processes. Automate them. Out source them. Hire people to do them and get back to your work.</p>\\n<h3 id=\\\"tasks-assignment--prioritisation\\\"><a href=\\\"#tasks-assignment--prioritisation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tasks Assignment &#x26; Prioritisation</h3>\\n<p>that are visible by everyone, Making sure everyone knows what it has to be done. Most of the times, team will stay in idle state when they don't know what to do. Talks should be clear to everyone and allow them to do work for a given time before new tasks arrive and reassigned. Those tasks should be sorted by criticality - prioritisation should be respected.</p>\\n<h3 id=\\\"responsibilities\\\"><a href=\\\"#responsibilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Responsibilities</h3>\\n<p>must be clear to everyone. Have you ever been in a situation where the manager asks why something happened and everyone in the team is looking each other? I know, it sucks. But clearly, there weren't no responsibilities. Keeping responsibilities clear means that everyone knows when it's time to stand up and take the response. So, the team can learn and continue.</p>\\n<h3 id=\\\"document-everything\\\"><a href=\\\"#document-everything\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Document Everything</h3>\\n<p>because no one can guarantee you a job for ever like no manager can guarantee a team that would stay the same for ever. Documenting means that while the faces in team changes, the work can continue. Each new person coming can immediately  get in track and continue the task the someone left unfinished.</p>\\n<h2 id=\\\"finally\\\"><a href=\\\"#finally\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Finally</h2>\\n<p>I would say that, when you're joining a team, you can't simply wait everyone to be as you would like to be. You may have to put a little something in the mix. Teams are not born perfect. It's the everyday inside process that will eventually mature and fill with wisdom the people behind. A perfect recipe to scale your team.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/scaling-your-team/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-09-10T17:33:38.000Z\",\"path\":\"/scaling-your-team/\",\"tags\":\"team, dev, scale, workplace\",\"title\":\"Be prepared to scale your team\",\"draft\":null}},{\"excerpt\":\"A common pitfall when comes to development teams is the inconsistent software and library versions across developers. The first time you install a Node.js dependency by  npm install --save , the latest version of that package, will be installed alongâ€¦\",\"html\":\"<p>A common pitfall when comes to development teams is the inconsistent software and library versions across developers.</p>\\n<p>The first time you install a Node.js dependency by <code>npm install --save</code>, the latest version of that package, will be installed along with the npm's default <a href=\\\"https://docs.npmjs.com/misc/config#save-prefix\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">save prefix (^)</a>. The '^' allows npm to auto install minor upgrades for this package, according to the <a href=\\\"http://semver.org/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">semver schema</a>.</p>\\n<p>Because of that, it's hard to guarantee that every developer in the team will have the same version and this creates problems. It can really save your day, when two different people on the same codebase gets different results on an predefined procedure and the cause is a breaking change on a package that got updated.</p>\\n<p>So what we do? There are a few ways you can pass this:</p>\\n<h3 id=\\\"reset-the-default---save-prefix\\\"><a href=\\\"#reset-the-default---save-prefix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reset the default <code>--save-prefix</code>.</h3>\\n<p>By running <code>npm config set save-prefix=''</code> you're overriding npm's default <a href=\\\"https://docs.npmjs.com/misc/config#save-prefix\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">save-prefix</a> value which is <code>^</code>. Now every package you install will be locked on it's current version and every person that runs <code>npm install</code> will get that version.</p>\\n<p>This can also introduce outdated packages, so make sure that you keep an eye on your dependencies for critical updates that you don't want to miss. You can also take advantage of the npm's <a href=\\\"https://docs.npmjs.com/cli/outdated\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">outdated command</a> that will check every package and report back for outdated packages.</p>\\n<p>Consider also keeping this setting in your <a href=\\\"https://docs.npmjs.com/files/npmrc\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\"><code>.npmrc</code></a> file, to not force every developer to set it explicitly on his/her machine.</p>\\n<h3 id=\\\"shrinkwrap\\\"><a href=\\\"#shrinkwrap\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>shrinkwrap</h3>\\n<p>npm's <a href=\\\"https://docs.npmjs.com/cli/shrinkwrap\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">shrinkwrap</a> is also a handy way to lock your versions across your team. By running <code>npm shrinkwrap</code>, a <code>shrinkwrap.json</code> file will be created at the root of your repo with the current versions  of your dependencies that are install at the moment and their dependencies.</p>\\n<p>With <code>shrinkwrap</code> you get the exact same dependencies tree across and not worry about breaking updates. <code>npm install</code> will respect a <code>shrinkwrap.json</code> file if it finds but it must also agrees with the current <code>package.json</code> file, so expect errors if those two files are not align.</p>\\n<p><code>shinkwrap</code> is the most safe way of locking your dependencies versions and still keeping them out of your repo, which brings me to the third and final option.</p>\\n<h3 id=\\\"keep-your-dependencies-under-version-control\\\"><a href=\\\"#keep-your-dependencies-under-version-control\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Your Dependencies Under Version Control</h3>\\n<p>This method is widely used, especially when maximum security is required. It's a proven method that keeps not only locked versions but code content too, so you don't worry if a malicious piece of code find it's way inside your favorite open source dependencies.</p>\\n<p>Be careful though, cause your repo will increase in size really quick. In case of a dependency that needs to be compiled (e.g. by <a href=\\\"https://github.com/TooTallNate/node-gyp\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">node-gyp</a>) the source code is usually really big, so be careful on that.</p>\\n<p>The npm guys have also a <a href=\\\"https://docs.npmjs.com/cli/shrinkwrap#caveats\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">few words</a> on this.</p>\\n<h2 id=\\\"not-a-nodejs-fan\\\"><a href=\\\"#not-a-nodejs-fan\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Not a Node.js Fan</h2>\\n<p>In case that you aren't really into Node.js but you still reading this piece (big ups man!!), I shall inform you that these techniques aren't new either have been introduced by the Node.js community for the first time.</p>\\n<p>PHP's Composer keeps a <a href=\\\"https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">composer.lock</a> file that locks the current installed versions and Ruby's Bundler has a Gemfile.lock file. Same goes for other systems.</p>\\n<p>So, do your homework and find your PM's way of handling this kind of life saver functionality.</p>\\n<h2 id=\\\"a-final-word\\\"><a href=\\\"#a-final-word\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>A Final Word</h2>\\n<p>Dependencies of a codebase is an every day process and can easily lead to few hours of bug hunting. Make sure to save those hours.</p>\\n<p>But, sooner or later, your team's inner policies will fail and this is ok, as soon as you understand the causes, you fix them and move. Move faster every time. Like a <a href=\\\"http://www.c25k.com/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">c25k</a> training. ;)</p>\\n<p>What's your preferred way of handling dependencies versions?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/consistent-dependencies-across-teams/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-06-26T18:29:20.000Z\",\"path\":\"/consistent-dependencies-across-teams/\",\"tags\":\"npm, shrinkwrap, team, node.js\",\"title\":\"Consistent dependencies across teams\",\"draft\":null}}],\"tag\":\"team\",\"pagesSum\":1,\"page\":1}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-team-12496c9c5b673dfe69e8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Admin Pisoni  shares lots of great insights he learned after all these years into managing and growing teams. This article says it all. Article\",\"html\":\"<p><a href=\\\"https://www.linkedin.com/in/adam-pisoni-12340b1\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Admin Pisoni</a> shares lots of great insights he learned after all these years into managing and growing teams. This article says it all.</p>\\n<p><a href=\\\"http://firstround.com/review/the-keys-to-scaling-yourself-as-a-technology-leader/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Article</a></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/the-keys-to-scaling-yourself-as-a-technology-leader/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-03-30T09:24:53.000Z\",\"path\":\"/the-keys-to-scaling-yourself-as-a-technology-leader/\",\"tags\":\"Management, team\",\"title\":\"The Keys to Scaling Yourself as a Technology Leader\",\"draft\":null}},{\"excerpt\":\"Fortunately, I have been lucky enough to work with a lot of dev teams.  Good  and bad. I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets  you up in the morning  while looking forwardâ€¦\",\"html\":\"<p>Fortunately, I have been lucky enough to work with a lot of dev teams. <a href=\\\"http://www.lifehack.org/articles/work/10-signs-you-are-working-happy-workplace.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Good</a> and bad.</p>\\n<p>I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets <a href=\\\"http://www.leadertoleaderjournal.com/sample-articles/the-importance-of-happiness-in-the-workplace.aspx\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">you up in the morning</a> while looking forward to meet your colleagues.</p>\\n<p>But that team that keeps you in being that place and continue working with them, didn't happen accidentally. Someone created it. This is my list for a happy and efficient development team. Cause these two are tied together and evolving along side.</p>\\n<h3 id=\\\"coding-style-guide\\\"><a href=\\\"#coding-style-guide\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Coding Style Guide</h3>\\n<p>is the new RFC. Force everyone to <a href=\\\"https://github.com/airbnb/javascript\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">be in the same page</a>. As in every other social team, so and your team must <a href=\\\"https://github.com/google/styleguide\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">meet rules</a> and follow them for the common good.</p>\\n<p>Everyone should write the same code. Otherwise, you'll end up with a huge code base that no one can understand, leave aside to scale it.</p>\\n<h3 id=\\\"git---git-flow\\\"><a href=\\\"#git---git-flow\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Git &#x26;  Git flow</h3>\\n<p>or <a href=\\\"http://nvie.com/posts/a-successful-git-branching-model/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">in other words</a>. Now, this is the first and the last time I'm talking about this. If you don't keep your code under some kind of version control, there is nothing much left for you.</p>\\n<p>Version controlling your code means that you keep history of every file change, every line addition and deletion. Jumping from the present to a certain point of past, that you know your code was working will save you tone of hours of frustration and money.</p>\\n<h3 id=\\\"dev-environments\\\"><a href=\\\"#dev-environments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dev Environments</h3>\\n<p>that simulates the live project. You make changes to the live site? No, it's not normal. No, no one does this any more. What it takes to be able to deliver the best to our clients? Is to test it for them, before them.</p>\\n<p>Make sure you can make a change to your project, or a replica of it, and be able to reproduce any sort of abnormality you can before it goes live.</p>\\n<h3 id=\\\"automation\\\"><a href=\\\"#automation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Automation</h3>\\n<p>is key. He/She who has ever worked at a fast grown company, knows that speed is priority. But keep doing the same process over and over again  can't be efficient. Find those processes. Automate them. Out source them. Hire people to do them and get back to your work.</p>\\n<h3 id=\\\"tasks-assignment--prioritisation\\\"><a href=\\\"#tasks-assignment--prioritisation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tasks Assignment &#x26; Prioritisation</h3>\\n<p>that are visible by everyone, Making sure everyone knows what it has to be done. Most of the times, team will stay in idle state when they don't know what to do. Talks should be clear to everyone and allow them to do work for a given time before new tasks arrive and reassigned. Those tasks should be sorted by criticality - prioritisation should be respected.</p>\\n<h3 id=\\\"responsibilities\\\"><a href=\\\"#responsibilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Responsibilities</h3>\\n<p>must be clear to everyone. Have you ever been in a situation where the manager asks why something happened and everyone in the team is looking each other? I know, it sucks. But clearly, there weren't no responsibilities. Keeping responsibilities clear means that everyone knows when it's time to stand up and take the response. So, the team can learn and continue.</p>\\n<h3 id=\\\"document-everything\\\"><a href=\\\"#document-everything\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Document Everything</h3>\\n<p>because no one can guarantee you a job for ever like no manager can guarantee a team that would stay the same for ever. Documenting means that while the faces in team changes, the work can continue. Each new person coming can immediately  get in track and continue the task the someone left unfinished.</p>\\n<h2 id=\\\"finally\\\"><a href=\\\"#finally\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Finally</h2>\\n<p>I would say that, when you're joining a team, you can't simply wait everyone to be as you would like to be. You may have to put a little something in the mix. Teams are not born perfect. It's the everyday inside process that will eventually mature and fill with wisdom the people behind. A perfect recipe to scale your team.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/scaling-your-team/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-09-10T17:33:38.000Z\",\"path\":\"/scaling-your-team/\",\"tags\":\"team, dev, scale, workplace\",\"title\":\"Be prepared to scale your team\",\"draft\":null}},{\"excerpt\":\"A common pitfall when comes to development teams is the inconsistent software and library versions across developers. The first time you install a Node.js dependency by  npm install --save , the latest version of that package, will be installed alongâ€¦\",\"html\":\"<p>A common pitfall when comes to development teams is the inconsistent software and library versions across developers.</p>\\n<p>The first time you install a Node.js dependency by <code>npm install --save</code>, the latest version of that package, will be installed along with the npm's default <a href=\\\"https://docs.npmjs.com/misc/config#save-prefix\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">save prefix (^)</a>. The '^' allows npm to auto install minor upgrades for this package, according to the <a href=\\\"http://semver.org/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">semver schema</a>.</p>\\n<p>Because of that, it's hard to guarantee that every developer in the team will have the same version and this creates problems. It can really save your day, when two different people on the same codebase gets different results on an predefined procedure and the cause is a breaking change on a package that got updated.</p>\\n<p>So what we do? There are a few ways you can pass this:</p>\\n<h3 id=\\\"reset-the-default---save-prefix\\\"><a href=\\\"#reset-the-default---save-prefix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reset the default <code>--save-prefix</code>.</h3>\\n<p>By running <code>npm config set save-prefix=''</code> you're overriding npm's default <a href=\\\"https://docs.npmjs.com/misc/config#save-prefix\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">save-prefix</a> value which is <code>^</code>. Now every package you install will be locked on it's current version and every person that runs <code>npm install</code> will get that version.</p>\\n<p>This can also introduce outdated packages, so make sure that you keep an eye on your dependencies for critical updates that you don't want to miss. You can also take advantage of the npm's <a href=\\\"https://docs.npmjs.com/cli/outdated\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">outdated command</a> that will check every package and report back for outdated packages.</p>\\n<p>Consider also keeping this setting in your <a href=\\\"https://docs.npmjs.com/files/npmrc\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\"><code>.npmrc</code></a> file, to not force every developer to set it explicitly on his/her machine.</p>\\n<h3 id=\\\"shrinkwrap\\\"><a href=\\\"#shrinkwrap\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>shrinkwrap</h3>\\n<p>npm's <a href=\\\"https://docs.npmjs.com/cli/shrinkwrap\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">shrinkwrap</a> is also a handy way to lock your versions across your team. By running <code>npm shrinkwrap</code>, a <code>shrinkwrap.json</code> file will be created at the root of your repo with the current versions  of your dependencies that are install at the moment and their dependencies.</p>\\n<p>With <code>shrinkwrap</code> you get the exact same dependencies tree across and not worry about breaking updates. <code>npm install</code> will respect a <code>shrinkwrap.json</code> file if it finds but it must also agrees with the current <code>package.json</code> file, so expect errors if those two files are not align.</p>\\n<p><code>shinkwrap</code> is the most safe way of locking your dependencies versions and still keeping them out of your repo, which brings me to the third and final option.</p>\\n<h3 id=\\\"keep-your-dependencies-under-version-control\\\"><a href=\\\"#keep-your-dependencies-under-version-control\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Your Dependencies Under Version Control</h3>\\n<p>This method is widely used, especially when maximum security is required. It's a proven method that keeps not only locked versions but code content too, so you don't worry if a malicious piece of code find it's way inside your favorite open source dependencies.</p>\\n<p>Be careful though, cause your repo will increase in size really quick. In case of a dependency that needs to be compiled (e.g. by <a href=\\\"https://github.com/TooTallNate/node-gyp\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">node-gyp</a>) the source code is usually really big, so be careful on that.</p>\\n<p>The npm guys have also a <a href=\\\"https://docs.npmjs.com/cli/shrinkwrap#caveats\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">few words</a> on this.</p>\\n<h2 id=\\\"not-a-nodejs-fan\\\"><a href=\\\"#not-a-nodejs-fan\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Not a Node.js Fan</h2>\\n<p>In case that you aren't really into Node.js but you still reading this piece (big ups man!!), I shall inform you that these techniques aren't new either have been introduced by the Node.js community for the first time.</p>\\n<p>PHP's Composer keeps a <a href=\\\"https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">composer.lock</a> file that locks the current installed versions and Ruby's Bundler has a Gemfile.lock file. Same goes for other systems.</p>\\n<p>So, do your homework and find your PM's way of handling this kind of life saver functionality.</p>\\n<h2 id=\\\"a-final-word\\\"><a href=\\\"#a-final-word\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>A Final Word</h2>\\n<p>Dependencies of a codebase is an every day process and can easily lead to few hours of bug hunting. Make sure to save those hours.</p>\\n<p>But, sooner or later, your team's inner policies will fail and this is ok, as soon as you understand the causes, you fix them and move. Move faster every time. Like a <a href=\\\"http://www.c25k.com/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">c25k</a> training. ;)</p>\\n<p>What's your preferred way of handling dependencies versions?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/consistent-dependencies-across-teams/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-06-26T18:29:20.000Z\",\"path\":\"/consistent-dependencies-across-teams/\",\"tags\":\"npm, shrinkwrap, team, node.js\",\"title\":\"Consistent dependencies across teams\",\"draft\":null}}],\"tag\":\"team\",\"pagesSum\":1,\"page\":1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-team.json\n// module id = 704\n// module chunks = 268644701030022"],"sourceRoot":""}