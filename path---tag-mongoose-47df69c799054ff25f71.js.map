{"version":3,"sources":["webpack:///path---tag-mongoose-47df69c799054ff25f71.js","webpack:///./.cache/json/tag-mongoose.json"],"names":["webpackJsonp","677","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","tag","pagesSum","page"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,4LAAAC,QAAA,gCAAmRC,aAAgBC,QAAUC,QAAA,6PAAAC,KAAA,otLAA4kMC,GAAA,wIAAAC,WAAA,EAAAC,aAA0QC,KAAA,2BAAAC,KAAA,yCAAAC,KAAA,oBAAAZ,MAAA,uCAAAa,MAAA,QAA0KC,IAAA,WAAAC,SAAA,EAAAC,KAAA","file":"path---tag-mongoose-47df69c799054ff25f71.js","sourcesContent":["webpackJsonp([50370423466140],{\n\n/***/ 677:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the  in  operator, even though the document didn't contain that field. But still it would return…\",\"html\":\"<p>Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the <code>in</code> operator, even though the document didn't contain that field.</p>\\n<p>But still it would return true:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  Schema <span class=\\\"token operator\\\">=</span> mongoose<span class=\\\"token punctuation\\\">.</span>Schema<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> exampleSchema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  someField<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  notExistingField<span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> versionKey<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notExistingField'</span> <span class=\\\"token keyword\\\">in</span> document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* true */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The fact is that Mongoose will first comply the fetched document against the defined Schema in order for it's getters/setters functions to work. So even though, we can't see the <code>notExistingField</code>, the <code>in</code> operator will always return true.</p>\\n<p>A solution is to change the checking and check for an undefined value, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* false */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Fixed.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/mongoose-objects-and-the-in-operator/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-08-31T17:51:38.000Z\",\"path\":\"/mongoose-objects-and-the-in-operator/\",\"tags\":\"mongodb, mongoose\",\"title\":\"Mongoose objects and the IN operator\",\"draft\":null}}],\"tag\":\"mongoose\",\"pagesSum\":1,\"page\":1}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-mongoose-47df69c799054ff25f71.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the  in  operator, even though the document didn't contain that field. But still it would return…\",\"html\":\"<p>Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the <code>in</code> operator, even though the document didn't contain that field.</p>\\n<p>But still it would return true:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  Schema <span class=\\\"token operator\\\">=</span> mongoose<span class=\\\"token punctuation\\\">.</span>Schema<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> exampleSchema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  someField<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  notExistingField<span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> versionKey<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notExistingField'</span> <span class=\\\"token keyword\\\">in</span> document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* true */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The fact is that Mongoose will first comply the fetched document against the defined Schema in order for it's getters/setters functions to work. So even though, we can't see the <code>notExistingField</code>, the <code>in</code> operator will always return true.</p>\\n<p>A solution is to change the checking and check for an undefined value, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">/* false */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Fixed.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/mongoose-objects-and-the-in-operator/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-08-31T17:51:38.000Z\",\"path\":\"/mongoose-objects-and-the-in-operator/\",\"tags\":\"mongodb, mongoose\",\"title\":\"Mongoose objects and the IN operator\",\"draft\":null}}],\"tag\":\"mongoose\",\"pagesSum\":1,\"page\":1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-mongoose.json\n// module id = 677\n// module chunks = 50370423466140"],"sourceRoot":""}