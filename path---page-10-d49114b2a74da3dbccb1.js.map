{"version":3,"sources":["webpack:///path---page-10-d49114b2a74da3dbccb1.js","webpack:///./.cache/json/page-10.json"],"names":["webpackJsonp","605","module","exports","data","site","siteMetadata","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","title","draft","page","pagesSum","prevPath","nextPath"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,YAAA,4LAAAC,QAAA,gCAAmPC,aAAgBC,QAAUC,QAAA,yPAAAC,KAAA,2gDAAAC,GAAA,2IAAAC,WAAA,EAAAC,aAAy9DC,KAAA,2BAAAC,KAAA,4CAAAC,KAAA,0CAAAC,MAAA,0CAAAC,MAAA,QAAwMT,QAAA,2PAAAC,KAAA,stFAAq0EC,GAAA,qKAAAC,WAAA,EAAAC,aAA63BC,KAAA,2BAAAC,KAAA,sEAAAC,KAAA,uBAAAC,MAAA,sEAAAC,MAAA,QAA2OT,QAAA,uMAAAC,KAAA,knBAAAC,GAAA,6HAAAC,WAAA,EAAAC,aAAkgCC,KAAA,2BAAAC,KAAA,8BAAAC,KAAA,yBAAAC,MAAA,4BAAAC,MAAA,QAA2JT,QAAA,8PAAAC,KAAA,qrGAAAC,GAAA,mIAAAC,WAAA,EAAAC,aAAgnHC,KAAA,2BAAAC,KAAA,oCAAAC,KAAA,gCAAAC,MAAA,kCAAAC,MAAA,QAA8KT,QAAA,uDAAAC,KAAA,gUAAAC,GAAA,0IAAAC,WAAA,EAAAC,aAA6jBC,KAAA,2BAAAC,KAAA,2CAAAC,KAAA,KAAAC,MAAA,2CAAAC,MAAA,QAAiKC,KAAA,GAAAC,SAAA,GAAAC,SAAA,UAAAC,SAAA","file":"path---page-10-d49114b2a74da3dbccb1.js","sourcesContent":["webpackJsonp([118850167530626],{\n\n/***/ 605:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Recently, my colleague  Yannis Rizos , tweeted me about a  book . Its title was somehow offensive and didn't look quite interesting at first. But once i started browsing it, i catch some really good points and decided to start from the beginning…\",\"html\":\"<p>Recently, my colleague <a title=\\\"Yannis Rizos on Twitter.com\\\" href=\\\"http://twitter.com/yrizos\\\" target=\\\"_blank\\\">Yannis Rizos</a>, tweeted me about a <a href=\\\"http://samizdat.mines.edu/howto/HowToBeAProgrammer.html\\\" target=\\\"_blank\\\" title=\\\"How to Be a Programmer\\\">book</a>. Its title was somehow offensive and didn't look quite interesting at first.</p>\\n<p>But once i started browsing it, i catch some really good points and decided to start from the beginning.</p>\\n<p>Written by <a title=\\\"Robert L Read\\\" href=\\\"http://c2.com/cgi/wiki?RobertlRead\\\" target=\\\"_blank\\\"><span class=\\\"firstname\\\">Robert</span> <span class=\\\"othername\\\">L</span> <span class=\\\"surname\\\">Read</span></a>, it's a free essay, ~100 pages long.</p>\\n<p>It is listing all the borrows and challenges a programmer will face and must pass in order to become a programmer.</p>\\n<p>Starts with the most essential skill of a programmer, debugging. How to debug and some of the most trivial bugs you will eventually find in your code.</p>\\n<p>It goes on with more skills like motivation, evolution, how to stress test, be a team player and communicate effectively with every type of people involved in this industry.</p>\\n<p>It is divided in 3 chapters, Beginner, Intermediate and Advanced and every chapter contains a few paragraphs for every concept.</p>\\n<p>I was really amazed by this essay and i would surely recommended to every beginner, junior, mid-senior professional programmer. I guess senior would already know these stuffs.</p>\\n<p>What are you favorite recent reads?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/how-to-be-a-programmer-by-robert-l-read/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-10-25T10:54:21.000Z\",\"path\":\"/how-to-be-a-programmer-by-robert-l-read/\",\"tags\":\"cleancode, code, programmers, debugging\",\"title\":\"How To Be A Programmer by Robert L Read\",\"draft\":null}},{\"excerpt\":\"The past few weeks, you would find Validation at  Github's PHP Trending projects. Validation  is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away. Here is a great list why…\",\"html\":\"<p>The past few weeks, you would find Validation at <a title=\\\"Github PHP Trending Projects\\\" href=\\\"https://github.com/trending?l=php\\\" target=\\\"_blank\\\">Github's PHP Trending projects.</a></p>\\n<p><a title=\\\"Respect/Validation on Github\\\" href=\\\"https://github.com/Respect/Validation\\\" target=\\\"_blank\\\">Validation</a> is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away.</p>\\n<p>Here is a great list why this library it's actually awesome.</p>\\n<p>From <a title=\\\"Respect/Validation on Reddit\\\" href=\\\"http://www.reddit.com/r/PHP/comments/1telis/respectvalidation_the_most_awesome_validation/ce7emzs\\\" target=\\\"_blank\\\">Reddit</a>:</p>\\n<blockquote>\\n<ul>\\n\\t<li>The chain is not a simple chain (it is not just linear), it is a fluent builder for a composite structure. You can write almost any validation rule for any data structure and group it in a single object✌️:key(\\\"name\\\", v::string()-&gt;length(1, 32)) -&gt;key(\\\"birth\\\", v::date('Y-m-d')-&gt;minimumAge(18)) -&gt;assert($someArrayWithData);</li>\\n\\t<li>You can nest as many validators as you want.</li>\\n\\t<li>Each validator is an instance that you can reuse (even for composing new, more complex instances).</li>\\n\\t<li>Three kinds of validation reports (validate() returns true/false, check() stops on first error, assert() collect all errors).</li>\\n\\t<li>Nested reports implement RecursiveIteratorIterator AND RecursiveTreeIterator (that's where the ASCII tree report came from!)</li>\\n\\t<li>A selector API for finding messages in complex nested reports (findMessages([\\\"user.address.street.length\\\"])).</li>\\n\\t<li>Reports are only generated when needed (true/false validation doesn't even touch the reporting system).</li>\\n\\t<li>Really easy to extend (most rules have a single method).</li>\\n\\t<li>Really easy to make inline rules✌️:callback(function ($input) { return $input == 42; });</li>\\n\\t<li>Logic operations on any validator✌️:allOf(v::numeric(), v::hexa(), v::min(1)); // numeric, hexadecimal and at least 1 v::oneOf(v::nullValue(), v::numeric()); // null or numeric</li>\\n\\t<li>Integrates with ZF1, ZF2 and Symfony2 validators if needed. Dependency is optional.</li>\\n\\t<li>A full concrete API (not relying on magic methods or chains) that can be built using dependency injection.</li>\\n\\t<li>Straightforward to use on unit tests instead of the PHPUnit assertion library.</li>\\n</ul>\\n</blockquote>\\nHere i wrote a simple User Model class where we can make our validation:\\n<p><a href=\\\"https://gist.github.com/stakisko/dfba7e1b576954232cd5\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https://gist.github.com/stakisko/dfba7e1b576954232cd5</a></p>\\n<p>Validation will throw an exception when it fail and you can inform your users.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/valiation-the-most-awesome-validation-engine-ever-created-for-php/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2014-10-08T16:02:59.000Z\",\"path\":\"/valiation-the-most-awesome-validation-engine-ever-created-for-php/\",\"tags\":\"php, validation, oop\",\"title\":\"Valiation : The most awesome validation engine ever created for PHP\",\"draft\":null}},{\"excerpt\":\"I am introducing  Stargento.com  to the  Magento  community. I am looking forward for your thoughts and feedback. Hit me on  Twitter . This is a meta-post for a post i wrote on  Medium . Thoughts?\",\"html\":\"<p>I am introducing <a title=\\\"Stargento is an online PHP Sandbox and a Magento playground\\\" href=\\\"http://stargento.com\\\" target=\\\"_blank\\\">Stargento.com</a> to the <a title=\\\"Magento\\\" href=\\\"http://magentocommerce.com/\\\" target=\\\"_blank\\\">Magento</a> community. I am looking forward for your thoughts and feedback.</p>\\n<p>Hit me on <a title=\\\"Kostas Bariotis on Twitter\\\" href=\\\"http://twitter.com/kbariotis\\\" target=\\\"_blank\\\">Twitter</a>.</p>\\n<p>This is a meta-post for a post i wrote on <a href=\\\"https://medium.com/@kbariotis/introducing-stargento-com-d7b202f2a55d\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Medium</a>. Thoughts?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/introducing-stargento-com/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-09-24T16:16:00.000Z\",\"path\":\"/introducing-stargento-com/\",\"tags\":\"stargento.com, magento\",\"title\":\"Introducing Stargento.com\",\"draft\":null}},{\"excerpt\":\"Magento is hard. No doubt about it. But this is not an excuse. Beside that (and a few other issues) it's still the number one e-commerce solution. It's proven. So, i wanted to talk a little about how i maintaining my Magento projects. 1) I am keeping…\",\"html\":\"<p>Magento is hard. No doubt about it. But this is not an excuse. Beside that (and a few other issues) it's still the number one e-commerce solution. It's proven.</p>\\n<p>So, i wanted to talk a little about how i maintaining my Magento projects.</p>\\n<p><strong>1) I am keeping everything under version control</strong></p>\\n<p>Magento's folder structure brings a lot of frustration. An extension can place it's files almost anywhere it's developer wants. It can be in base package theme either in package default theme. It can be in media folder for permanent files you want to keep under control either in /js folder for Javascript global libraries.</p>\\n<p>Keeping a .gitignore with all the Project's specific files is almost impossible.</p>\\n<p>Also, you can't carry with you your Project's modules, except using <a title=\\\"Composer with Magento\\\" href=\\\"https://github.com/magento-hackathon/magento-composer-installer\\\" target=\\\"_blank\\\">Composer with Magento </a>which it's also complicate to work with. (Still struggling with it on Windows)</p>\\n<p>So, what i do is keep everything under version control, except temporary files like cache, logs, etc. etc.</p>\\n<p><strong>2) Never touch core files</strong></p>\\n<p>By never touching core files like in folders:</p>\\n<ul>\\n\\t<li>app/code/core</li>\\n\\t<li>app/locale/</li>\\n\\t<li>app/design/frontend/(base|default|rwd)</li>\\n\\t<li>app/design/adminhtml/</li>\\n\\t<li>js/ (initial folders only)</li>\\n\\t<li>lib/ (initial folders only)</li>\\n\\t<li>skin/frontend/(base|default|rwd)</li>\\n\\t<li>includes/</li>\\n</ul>\\nyou make sure that, when a feature release is out, you can just copy paste above you project and everything still works fine.\\n<p>Keeping your Magento always up to date can save you from big disasters. I must make sure that feature releases wont be a pain to get.</p>\\n<p><strong>3) Extend everything</strong></p>\\n<p>In case you need to extend a Magento's core functionality or make it behave different, you are covered.</p>\\n<p>Magento's team had a purpose and only one. To make the most extensible e-commerce framework out there. They even sacrifice performance on this purpose. Now, some may argue that that was stupid or they didn't success after all. I will have to disagree with both.</p>\\n<p>Magento is a true PHP OOP project, powered by the most powerful framework, the <a title=\\\"Zend Framework\\\" href=\\\"http://framework.zend.com/\\\" target=\\\"_blank\\\">Zend Framework</a>.</p>\\n<p>As about performance, these days you have a lot of tools in order to create a fast website. You may be hosted at an AWS super server, use fast caching methods, etc, etc.</p>\\n<p><strong>4) Keep a local Magento with stuff i use a lot</strong></p>\\n<p>After a few projects, i realized that a lot of processes were repeated again and again. The same modules i will installed on every fresh Magento install, the same configuration i would do. So i keep a private(yet!) Magento repository were i have all of my Modules and a clean Database dump with my configuration set.</p>\\n<p>How do you deal with your Magento projects? Share your tactics and technics with me on <a title=\\\"Kostas Bariotis on Twitter\\\" href=\\\"http://twitter.com/kbariotis\\\" target=\\\"_blank\\\">Twitter </a>or bellow in the comments.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/maintaining-a-magento-code-base/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2014-09-08T17:23:58.000Z\",\"path\":\"/maintaining-a-magento-code-base/\",\"tags\":\"magento, codebase, e-commerce\",\"title\":\"Maintaining a Magento code base\",\"draft\":null}},{\"excerpt\":\"— Ivan Chepurnyi (@IvanChepurnyi)  September 6, 2014\",\"html\":\"<blockquote class=\\\"twitter-tweet\\\" lang=\\\"en\\\">Magento 2 release plan. Seems like stable is end of next year. <a href=\\\"http://t.co/bg8kwqshuI\\\">pic.twitter.com/bg8kwqshuI</a>\\n<p>— Ivan Chepurnyi (@IvanChepurnyi) <a href=\\\"https://twitter.com/IvanChepurnyi/status/508185778761900032\\\">September 6, 2014</a></blockquote></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/magento-2-roadmap-long-walk-to-freedom/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-09-06T07:07:26.000Z\",\"path\":\"/magento-2-roadmap-long-walk-to-freedom/\",\"tags\":null,\"title\":\"Magento 2 Roadmap : Long walk to freedom\",\"draft\":null}}],\"page\":10,\"pagesSum\":14,\"prevPath\":\"/page/9\",\"nextPath\":\"/page/11\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---page-10-d49114b2a74da3dbccb1.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Recently, my colleague  Yannis Rizos , tweeted me about a  book . Its title was somehow offensive and didn't look quite interesting at first. But once i started browsing it, i catch some really good points and decided to start from the beginning…\",\"html\":\"<p>Recently, my colleague <a title=\\\"Yannis Rizos on Twitter.com\\\" href=\\\"http://twitter.com/yrizos\\\" target=\\\"_blank\\\">Yannis Rizos</a>, tweeted me about a <a href=\\\"http://samizdat.mines.edu/howto/HowToBeAProgrammer.html\\\" target=\\\"_blank\\\" title=\\\"How to Be a Programmer\\\">book</a>. Its title was somehow offensive and didn't look quite interesting at first.</p>\\n<p>But once i started browsing it, i catch some really good points and decided to start from the beginning.</p>\\n<p>Written by <a title=\\\"Robert L Read\\\" href=\\\"http://c2.com/cgi/wiki?RobertlRead\\\" target=\\\"_blank\\\"><span class=\\\"firstname\\\">Robert</span> <span class=\\\"othername\\\">L</span> <span class=\\\"surname\\\">Read</span></a>, it's a free essay, ~100 pages long.</p>\\n<p>It is listing all the borrows and challenges a programmer will face and must pass in order to become a programmer.</p>\\n<p>Starts with the most essential skill of a programmer, debugging. How to debug and some of the most trivial bugs you will eventually find in your code.</p>\\n<p>It goes on with more skills like motivation, evolution, how to stress test, be a team player and communicate effectively with every type of people involved in this industry.</p>\\n<p>It is divided in 3 chapters, Beginner, Intermediate and Advanced and every chapter contains a few paragraphs for every concept.</p>\\n<p>I was really amazed by this essay and i would surely recommended to every beginner, junior, mid-senior professional programmer. I guess senior would already know these stuffs.</p>\\n<p>What are you favorite recent reads?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/how-to-be-a-programmer-by-robert-l-read/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-10-25T10:54:21.000Z\",\"path\":\"/how-to-be-a-programmer-by-robert-l-read/\",\"tags\":\"cleancode, code, programmers, debugging\",\"title\":\"How To Be A Programmer by Robert L Read\",\"draft\":null}},{\"excerpt\":\"The past few weeks, you would find Validation at  Github's PHP Trending projects. Validation  is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away. Here is a great list why…\",\"html\":\"<p>The past few weeks, you would find Validation at <a title=\\\"Github PHP Trending Projects\\\" href=\\\"https://github.com/trending?l=php\\\" target=\\\"_blank\\\">Github's PHP Trending projects.</a></p>\\n<p><a title=\\\"Respect/Validation on Github\\\" href=\\\"https://github.com/Respect/Validation\\\" target=\\\"_blank\\\">Validation</a> is a very flexible, fully customizable, loaded with tone of validators, engine that you can use on your PHP projects right away.</p>\\n<p>Here is a great list why this library it's actually awesome.</p>\\n<p>From <a title=\\\"Respect/Validation on Reddit\\\" href=\\\"http://www.reddit.com/r/PHP/comments/1telis/respectvalidation_the_most_awesome_validation/ce7emzs\\\" target=\\\"_blank\\\">Reddit</a>:</p>\\n<blockquote>\\n<ul>\\n\\t<li>The chain is not a simple chain (it is not just linear), it is a fluent builder for a composite structure. You can write almost any validation rule for any data structure and group it in a single object✌️:key(\\\"name\\\", v::string()-&gt;length(1, 32)) -&gt;key(\\\"birth\\\", v::date('Y-m-d')-&gt;minimumAge(18)) -&gt;assert($someArrayWithData);</li>\\n\\t<li>You can nest as many validators as you want.</li>\\n\\t<li>Each validator is an instance that you can reuse (even for composing new, more complex instances).</li>\\n\\t<li>Three kinds of validation reports (validate() returns true/false, check() stops on first error, assert() collect all errors).</li>\\n\\t<li>Nested reports implement RecursiveIteratorIterator AND RecursiveTreeIterator (that's where the ASCII tree report came from!)</li>\\n\\t<li>A selector API for finding messages in complex nested reports (findMessages([\\\"user.address.street.length\\\"])).</li>\\n\\t<li>Reports are only generated when needed (true/false validation doesn't even touch the reporting system).</li>\\n\\t<li>Really easy to extend (most rules have a single method).</li>\\n\\t<li>Really easy to make inline rules✌️:callback(function ($input) { return $input == 42; });</li>\\n\\t<li>Logic operations on any validator✌️:allOf(v::numeric(), v::hexa(), v::min(1)); // numeric, hexadecimal and at least 1 v::oneOf(v::nullValue(), v::numeric()); // null or numeric</li>\\n\\t<li>Integrates with ZF1, ZF2 and Symfony2 validators if needed. Dependency is optional.</li>\\n\\t<li>A full concrete API (not relying on magic methods or chains) that can be built using dependency injection.</li>\\n\\t<li>Straightforward to use on unit tests instead of the PHPUnit assertion library.</li>\\n</ul>\\n</blockquote>\\nHere i wrote a simple User Model class where we can make our validation:\\n<p><a href=\\\"https://gist.github.com/stakisko/dfba7e1b576954232cd5\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https://gist.github.com/stakisko/dfba7e1b576954232cd5</a></p>\\n<p>Validation will throw an exception when it fail and you can inform your users.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/valiation-the-most-awesome-validation-engine-ever-created-for-php/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2014-10-08T16:02:59.000Z\",\"path\":\"/valiation-the-most-awesome-validation-engine-ever-created-for-php/\",\"tags\":\"php, validation, oop\",\"title\":\"Valiation : The most awesome validation engine ever created for PHP\",\"draft\":null}},{\"excerpt\":\"I am introducing  Stargento.com  to the  Magento  community. I am looking forward for your thoughts and feedback. Hit me on  Twitter . This is a meta-post for a post i wrote on  Medium . Thoughts?\",\"html\":\"<p>I am introducing <a title=\\\"Stargento is an online PHP Sandbox and a Magento playground\\\" href=\\\"http://stargento.com\\\" target=\\\"_blank\\\">Stargento.com</a> to the <a title=\\\"Magento\\\" href=\\\"http://magentocommerce.com/\\\" target=\\\"_blank\\\">Magento</a> community. I am looking forward for your thoughts and feedback.</p>\\n<p>Hit me on <a title=\\\"Kostas Bariotis on Twitter\\\" href=\\\"http://twitter.com/kbariotis\\\" target=\\\"_blank\\\">Twitter</a>.</p>\\n<p>This is a meta-post for a post i wrote on <a href=\\\"https://medium.com/@kbariotis/introducing-stargento-com-d7b202f2a55d\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Medium</a>. Thoughts?</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/introducing-stargento-com/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-09-24T16:16:00.000Z\",\"path\":\"/introducing-stargento-com/\",\"tags\":\"stargento.com, magento\",\"title\":\"Introducing Stargento.com\",\"draft\":null}},{\"excerpt\":\"Magento is hard. No doubt about it. But this is not an excuse. Beside that (and a few other issues) it's still the number one e-commerce solution. It's proven. So, i wanted to talk a little about how i maintaining my Magento projects. 1) I am keeping…\",\"html\":\"<p>Magento is hard. No doubt about it. But this is not an excuse. Beside that (and a few other issues) it's still the number one e-commerce solution. It's proven.</p>\\n<p>So, i wanted to talk a little about how i maintaining my Magento projects.</p>\\n<p><strong>1) I am keeping everything under version control</strong></p>\\n<p>Magento's folder structure brings a lot of frustration. An extension can place it's files almost anywhere it's developer wants. It can be in base package theme either in package default theme. It can be in media folder for permanent files you want to keep under control either in /js folder for Javascript global libraries.</p>\\n<p>Keeping a .gitignore with all the Project's specific files is almost impossible.</p>\\n<p>Also, you can't carry with you your Project's modules, except using <a title=\\\"Composer with Magento\\\" href=\\\"https://github.com/magento-hackathon/magento-composer-installer\\\" target=\\\"_blank\\\">Composer with Magento </a>which it's also complicate to work with. (Still struggling with it on Windows)</p>\\n<p>So, what i do is keep everything under version control, except temporary files like cache, logs, etc. etc.</p>\\n<p><strong>2) Never touch core files</strong></p>\\n<p>By never touching core files like in folders:</p>\\n<ul>\\n\\t<li>app/code/core</li>\\n\\t<li>app/locale/</li>\\n\\t<li>app/design/frontend/(base|default|rwd)</li>\\n\\t<li>app/design/adminhtml/</li>\\n\\t<li>js/ (initial folders only)</li>\\n\\t<li>lib/ (initial folders only)</li>\\n\\t<li>skin/frontend/(base|default|rwd)</li>\\n\\t<li>includes/</li>\\n</ul>\\nyou make sure that, when a feature release is out, you can just copy paste above you project and everything still works fine.\\n<p>Keeping your Magento always up to date can save you from big disasters. I must make sure that feature releases wont be a pain to get.</p>\\n<p><strong>3) Extend everything</strong></p>\\n<p>In case you need to extend a Magento's core functionality or make it behave different, you are covered.</p>\\n<p>Magento's team had a purpose and only one. To make the most extensible e-commerce framework out there. They even sacrifice performance on this purpose. Now, some may argue that that was stupid or they didn't success after all. I will have to disagree with both.</p>\\n<p>Magento is a true PHP OOP project, powered by the most powerful framework, the <a title=\\\"Zend Framework\\\" href=\\\"http://framework.zend.com/\\\" target=\\\"_blank\\\">Zend Framework</a>.</p>\\n<p>As about performance, these days you have a lot of tools in order to create a fast website. You may be hosted at an AWS super server, use fast caching methods, etc, etc.</p>\\n<p><strong>4) Keep a local Magento with stuff i use a lot</strong></p>\\n<p>After a few projects, i realized that a lot of processes were repeated again and again. The same modules i will installed on every fresh Magento install, the same configuration i would do. So i keep a private(yet!) Magento repository were i have all of my Modules and a clean Database dump with my configuration set.</p>\\n<p>How do you deal with your Magento projects? Share your tactics and technics with me on <a title=\\\"Kostas Bariotis on Twitter\\\" href=\\\"http://twitter.com/kbariotis\\\" target=\\\"_blank\\\">Twitter </a>or bellow in the comments.</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/maintaining-a-magento-code-base/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2014-09-08T17:23:58.000Z\",\"path\":\"/maintaining-a-magento-code-base/\",\"tags\":\"magento, codebase, e-commerce\",\"title\":\"Maintaining a Magento code base\",\"draft\":null}},{\"excerpt\":\"— Ivan Chepurnyi (@IvanChepurnyi)  September 6, 2014\",\"html\":\"<blockquote class=\\\"twitter-tweet\\\" lang=\\\"en\\\">Magento 2 release plan. Seems like stable is end of next year. <a href=\\\"http://t.co/bg8kwqshuI\\\">pic.twitter.com/bg8kwqshuI</a>\\n<p>— Ivan Chepurnyi (@IvanChepurnyi) <a href=\\\"https://twitter.com/IvanChepurnyi/status/508185778761900032\\\">September 6, 2014</a></blockquote></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/magento-2-roadmap-long-walk-to-freedom/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2014-09-06T07:07:26.000Z\",\"path\":\"/magento-2-roadmap-long-walk-to-freedom/\",\"tags\":null,\"title\":\"Magento 2 Roadmap : Long walk to freedom\",\"draft\":null}}],\"page\":10,\"pagesSum\":14,\"prevPath\":\"/page/9\",\"nextPath\":\"/page/11\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/page-10.json\n// module id = 605\n// module chunks = 118850167530626"],"sourceRoot":""}