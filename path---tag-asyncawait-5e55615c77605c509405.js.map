{"version":3,"sources":["webpack:///path---tag-asyncawait-5e55615c77605c509405.js","webpack:///./.cache/json/tag-asyncawait.json"],"names":["webpackJsonp","634","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","tag","pagesSum","page"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,4LAAAC,QAAA,gCAAmRC,aAAgBC,QAAUC,QAAA,4PAAAC,KAAA;AAA01mCC,GAAA,kIAAAC,WAAA,EAAAC,aAAsmJC,KAAA,2BAAAC,KAAA,mCAAAC,KAAA,sBAAAZ,MAAA,mCAAAa,MAAA,QAAkKC,IAAA,aAAAC,SAAA,EAAAC,KAAA","file":"path---tag-asyncawait-5e55615c77605c509405.js","sourcesContent":["webpackJsonp([149747205944066],{\n\n/***/ 634:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"With the eighth (8) version of Node.js becoming an LTS, I think that this is a good time to consider switching to it and enjoy the awesome new  async/await  feature that will help us move away to an even more readable and synchronous flow. Promises…\",\"html\":\"<p>With the eighth (8) version of Node.js becoming an LTS, I think that this is a good time to consider switching to it and enjoy the awesome new <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">async/await</a> feature that will help us move away to an even more readable and synchronous flow. Promises served us well for the past 2 or so years but they came with frustration as well.</p>\\n<p>In this post, I will try to provide a real world example of how we can move a Promise-based REST API controller to an async/await style. This way we can have a better understanding of how things have changed and what are the benefits of such a move.</p>\\n<h2 id=\\\"a-promise-based-example\\\"><a href=\\\"#a-promise-based-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>A Promise-based example</h2>\\n<p>Let's take an example and move from there. This is an actual controller (slighty changed for the purposes of this post) from a project of mine I've been working on:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> BPromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bluebird'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> EmailError <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./../errors'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Emulate an Express.js route call as an example\\n */</span>\\n<span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> json<span class=\\\"token punctuation\\\">:</span> response <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loginController</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> email<span class=\\\"token punctuation\\\">,</span> password <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> user<span class=\\\"token punctuation\\\">;</span>\\n\\n  BPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>fetchedUser <span class=\\\"token operator\\\">=></span> user <span class=\\\"token operator\\\">=</span> fetchedUser<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">comparePasswords</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>token <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> token <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Invalid email and/or password'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>EmailError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Unexpected error, please try again'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Validate input from Request\\n *\\n * @param {Object} input\\n * @throws {WrongCredentialsError}\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>input<span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>input<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Fetch a User from the DB by Email\\n *\\n * @throws WrongCredentialsError\\n * @throws DBConnectionError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    userId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_ID'</span><span class=\\\"token punctuation\\\">,</span>\\n    email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'konmpar@gmail.com'</span><span class=\\\"token punctuation\\\">,</span>\\n    password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_PASSWORD_HASH'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Compare two password\\n *\\n * @param {String} inputPwd\\n * @param {String} storedPwd\\n * @throws {WrongCredentialsError}\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">comparePasswords</span><span class=\\\"token punctuation\\\">(</span>inputPwd<span class=\\\"token punctuation\\\">,</span> storedPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>inputPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> storedPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Hash password\\n *\\n * @param {String} password\\n * @returns {String}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> password<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Mark a user's logged in timestamp\\n *\\n * @param {String} userId\\n * @throws DBConnectionError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Send a follow up email\\n *\\n * @param {String} userId\\n * @throws EmailError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Generate a JWT token to send to the client\\n *\\n * @param {Object} user\\n * @returns {BPromise&lt;String>}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'DUMMY_JWT_TOKEN'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So a few notes here:</p>\\n<h3 id=\\\"outer-scope-variables\\\"><a href=\\\"#outer-scope-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Outer scope variables</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> user<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* ... */</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>fetchedUser <span class=\\\"token operator\\\">=></span> user <span class=\\\"token operator\\\">=</span> fetchedUser<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">/* ... */</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">/* ... */</span>\\n</code></pre>\\n      </div>\\n<p>Notice here how I am making a global inside the function, in order to use the User object on various calls in my Promise chain. A possible overcome would be to make my functions always return the User object, but that would a) make my functions make no sense at all and b) tightly couple my functions with this particular Promise chain so I couldn't use them in other places.</p>\\n<h3 id=\\\"start-the-promise-chain-with-a-promise\\\"><a href=\\\"#start-the-promise-chain-with-a-promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Start the Promise chain with a Promise</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">/* ... */</span>\\nBPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">/* ... */</span>\\n</code></pre>\\n      </div>\\n<p>A Promise chain must start from a Promise, but the <code>validateUserInput</code> function doesn't return one. <code>Bluebird</code> to the resque. This way I can wrap my functions inside of a Promise call. I agree when you tell me this is just noise.</p>\\n<h3 id=\\\"bluebird\\\"><a href=\\\"#bluebird\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bluebird</h3>\\n<p>I am using Bluebird a lot. And that's because without it my code would be even more bloated with Promise returns here and there. Bluebird makes a good use of DRY so I don't have to. I could make all my functions, even those that doesn't do async stuff, return a Promise but that would mean that I had to \\\"wait\\\" for them, which means even more noise.</p>\\n<p>But, Bluebird is just another dependency that can possibly break my code on its next release. We don't want that.</p>\\n<h2 id=\\\"asyncawait-version\\\"><a href=\\\"#asyncawait-version\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Async/Await version</h2>\\n<p>Let's now see the same code, but written with async/await and compare it with the above.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> EmailError <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./../errors'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Emulate an Express.js route call as an example\\n */</span>\\n<span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> json<span class=\\\"token punctuation\\\">:</span> response <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">/**\\n *\\n * @param {Object} req\\n * @param {Object} res\\n * @param {Object} err\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> email<span class=\\\"token punctuation\\\">,</span> password <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>email <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>password <span class=\\\"token operator\\\">!==</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> token <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">err</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Invalid email and/or password'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">DBConnectionError</span> <span class=\\\"token operator\\\">||</span> err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">EmailError</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Unexpected error, please try again'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Fetch a User from the DB by Email\\n *\\n * @throws WrongCredentialsError\\n * @throws DBConnectionError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    userId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_ID'</span><span class=\\\"token punctuation\\\">,</span>\\n    email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'konmpar@gmail.com'</span><span class=\\\"token punctuation\\\">,</span>\\n    password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_PASSWORD_HASH'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Hash password\\n *\\n * @param {String} password\\n * @returns {String}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> password<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Mark a user's logged in timestamp\\n *\\n * @param {String} userId\\n * @throws DBConnectionError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Send a follow up email\\n *\\n * @param {String} userId\\n * @throws EmailError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Generate a JWT token to send to the client\\n *\\n * @param {Object} user\\n * @returns {Promise&lt;String>}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'DUMMY_JWT_TOKEN'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Yay!</p>\\n<h3 id=\\\"no-outer-scope-variables\\\"><a href=\\\"#no-outer-scope-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No outer scope variables</h3>\\n<p>Now all our functions are called in the same block thus the same scope, without being passed in a <code>then</code> function. We don't have to do unneeded assignments and keep global variables.</p>\\n<h3 id=\\\"no-unessecary-promise-returns\\\"><a href=\\\"#no-unessecary-promise-returns\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No unessecary Promise returns</h3>\\n<p>Previously declared functions <code>validateInput</code> and <code>comparePasswords</code> can now live inside the main block. I wouldn't write unit tests on them neither I would use them somewhere else in my codebase, so I don't have to put them in separate functions. Less functions, less code.</p>\\n<h3 id=\\\"readable-code\\\"><a href=\\\"#readable-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Readable code</h3>\\n<p>Less code means easier to read and argue about.</p>\\n<h3 id=\\\"no-bluebird-dependency\\\"><a href=\\\"#no-bluebird-dependency\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No Bluebird dependency</h3>\\n<p>Bluebird is now not needed since we can return native Promise objects. Previously, I was using <code>catch</code> with specific error type and <code>try</code> which are Bluebird specific.</p>\\n<h2 id=\\\"conclussion\\\"><a href=\\\"#conclussion\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Conclussion</h2>\\n<p>We should always strive to refine and improve our codebases. Async/await can bring a lot of improvements and help us write more readable code, easier to argue about and to spot bugs. In case, you have to use still Promises, check out a <a href=\\\"http://2ality.com/2017/08/promise-callback-data-flow.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">wonderfull piece by Dr. Axel Rauschmayer</a> for more Promises and Async/Await patterns.</p>\\n<p>Node.js 8 is now in LTS mode, so you have no reasons not to upgrade and miss the shiny new features of Javascript.</p>\\n<p>Let me know what you think in the comments below and share this article with someone you know it would be helpfull to. 🤝</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/async-await-a-thorough-example/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":6,\"frontmatter\":{\"date\":\"2017-11-24T09:40:42.000Z\",\"path\":\"/async-await-a-thorough-example/\",\"tags\":\"Node.js, AsyncAwait\",\"title\":\"Async/await - A thorough example\",\"draft\":null}}],\"tag\":\"AsyncAwait\",\"pagesSum\":1,\"page\":1}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tag-asyncawait-5e55615c77605c509405.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I am Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"With the eighth (8) version of Node.js becoming an LTS, I think that this is a good time to consider switching to it and enjoy the awesome new  async/await  feature that will help us move away to an even more readable and synchronous flow. Promises…\",\"html\":\"<p>With the eighth (8) version of Node.js becoming an LTS, I think that this is a good time to consider switching to it and enjoy the awesome new <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">async/await</a> feature that will help us move away to an even more readable and synchronous flow. Promises served us well for the past 2 or so years but they came with frustration as well.</p>\\n<p>In this post, I will try to provide a real world example of how we can move a Promise-based REST API controller to an async/await style. This way we can have a better understanding of how things have changed and what are the benefits of such a move.</p>\\n<h2 id=\\\"a-promise-based-example\\\"><a href=\\\"#a-promise-based-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>A Promise-based example</h2>\\n<p>Let's take an example and move from there. This is an actual controller (slighty changed for the purposes of this post) from a project of mine I've been working on:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> BPromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bluebird'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> EmailError <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./../errors'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Emulate an Express.js route call as an example\\n */</span>\\n<span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> json<span class=\\\"token punctuation\\\">:</span> response <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loginController</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> email<span class=\\\"token punctuation\\\">,</span> password <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> user<span class=\\\"token punctuation\\\">;</span>\\n\\n  BPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>fetchedUser <span class=\\\"token operator\\\">=></span> user <span class=\\\"token operator\\\">=</span> fetchedUser<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">comparePasswords</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>token <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> token <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Invalid email and/or password'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>EmailError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Unexpected error, please try again'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Validate input from Request\\n *\\n * @param {Object} input\\n * @throws {WrongCredentialsError}\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>input<span class=\\\"token punctuation\\\">.</span>email <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>input<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Fetch a User from the DB by Email\\n *\\n * @throws WrongCredentialsError\\n * @throws DBConnectionError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    userId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_ID'</span><span class=\\\"token punctuation\\\">,</span>\\n    email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'konmpar@gmail.com'</span><span class=\\\"token punctuation\\\">,</span>\\n    password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_PASSWORD_HASH'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Compare two password\\n *\\n * @param {String} inputPwd\\n * @param {String} storedPwd\\n * @throws {WrongCredentialsError}\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">comparePasswords</span><span class=\\\"token punctuation\\\">(</span>inputPwd<span class=\\\"token punctuation\\\">,</span> storedPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>inputPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> storedPwd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Hash password\\n *\\n * @param {String} password\\n * @returns {String}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> password<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Mark a user's logged in timestamp\\n *\\n * @param {String} userId\\n * @throws DBConnectionError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Send a follow up email\\n *\\n * @param {String} userId\\n * @throws EmailError\\n * @returns {BPromise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Generate a JWT token to send to the client\\n *\\n * @param {Object} user\\n * @returns {BPromise&lt;String>}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'DUMMY_JWT_TOKEN'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BPromise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So a few notes here:</p>\\n<h3 id=\\\"outer-scope-variables\\\"><a href=\\\"#outer-scope-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Outer scope variables</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> user<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* ... */</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>fetchedUser <span class=\\\"token operator\\\">=></span> user <span class=\\\"token operator\\\">=</span> fetchedUser<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">/* ... */</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">/* ... */</span>\\n</code></pre>\\n      </div>\\n<p>Notice here how I am making a global inside the function, in order to use the User object on various calls in my Promise chain. A possible overcome would be to make my functions always return the User object, but that would a) make my functions make no sense at all and b) tightly couple my functions with this particular Promise chain so I couldn't use them in other places.</p>\\n<h3 id=\\\"start-the-promise-chain-with-a-promise\\\"><a href=\\\"#start-the-promise-chain-with-a-promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Start the Promise chain with a Promise</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">/* ... */</span>\\nBPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">validateUserInput</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">/* ... */</span>\\n</code></pre>\\n      </div>\\n<p>A Promise chain must start from a Promise, but the <code>validateUserInput</code> function doesn't return one. <code>Bluebird</code> to the resque. This way I can wrap my functions inside of a Promise call. I agree when you tell me this is just noise.</p>\\n<h3 id=\\\"bluebird\\\"><a href=\\\"#bluebird\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bluebird</h3>\\n<p>I am using Bluebird a lot. And that's because without it my code would be even more bloated with Promise returns here and there. Bluebird makes a good use of DRY so I don't have to. I could make all my functions, even those that doesn't do async stuff, return a Promise but that would mean that I had to \\\"wait\\\" for them, which means even more noise.</p>\\n<p>But, Bluebird is just another dependency that can possibly break my code on its next release. We don't want that.</p>\\n<h2 id=\\\"asyncawait-version\\\"><a href=\\\"#asyncawait-version\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Async/Await version</h2>\\n<p>Let's now see the same code, but written with async/await and compare it with the above.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> WrongCredentialsError<span class=\\\"token punctuation\\\">,</span> DBConnectionError<span class=\\\"token punctuation\\\">,</span> EmailError <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./../errors'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Emulate an Express.js route call as an example\\n */</span>\\n<span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> json<span class=\\\"token punctuation\\\">:</span> response <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">/**\\n *\\n * @param {Object} req\\n * @param {Object} res\\n * @param {Object} err\\n * @returns {Void}\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loginController</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> email<span class=\\\"token punctuation\\\">,</span> password <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>email <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>password <span class=\\\"token operator\\\">!==</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>password<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> token <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">err</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">WrongCredentialsError</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Invalid email and/or password'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">DBConnectionError</span> <span class=\\\"token operator\\\">||</span> err <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">EmailError</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Unexpected error, please try again'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Fetch a User from the DB by Email\\n *\\n * @throws WrongCredentialsError\\n * @throws DBConnectionError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchUserByEmail</span><span class=\\\"token punctuation\\\">(</span>email<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    userId<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_ID'</span><span class=\\\"token punctuation\\\">,</span>\\n    email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'konmpar@gmail.com'</span><span class=\\\"token punctuation\\\">,</span>\\n    password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'DUMMY_PASSWORD_HASH'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Hash password\\n *\\n * @param {String} password\\n * @returns {String}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hashPassword</span><span class=\\\"token punctuation\\\">(</span>password<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> password<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Mark a user's logged in timestamp\\n *\\n * @param {String} userId\\n * @throws DBConnectionError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">markLoggedInTimestamp</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Send a follow up email\\n *\\n * @param {String} userId\\n * @throws EmailError\\n * @returns {Promise}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Generate a JWT token to send to the client\\n *\\n * @param {Object} user\\n * @returns {Promise&lt;String>}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateJWT</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'DUMMY_JWT_TOKEN'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Yay!</p>\\n<h3 id=\\\"no-outer-scope-variables\\\"><a href=\\\"#no-outer-scope-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No outer scope variables</h3>\\n<p>Now all our functions are called in the same block thus the same scope, without being passed in a <code>then</code> function. We don't have to do unneeded assignments and keep global variables.</p>\\n<h3 id=\\\"no-unessecary-promise-returns\\\"><a href=\\\"#no-unessecary-promise-returns\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No unessecary Promise returns</h3>\\n<p>Previously declared functions <code>validateInput</code> and <code>comparePasswords</code> can now live inside the main block. I wouldn't write unit tests on them neither I would use them somewhere else in my codebase, so I don't have to put them in separate functions. Less functions, less code.</p>\\n<h3 id=\\\"readable-code\\\"><a href=\\\"#readable-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Readable code</h3>\\n<p>Less code means easier to read and argue about.</p>\\n<h3 id=\\\"no-bluebird-dependency\\\"><a href=\\\"#no-bluebird-dependency\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No Bluebird dependency</h3>\\n<p>Bluebird is now not needed since we can return native Promise objects. Previously, I was using <code>catch</code> with specific error type and <code>try</code> which are Bluebird specific.</p>\\n<h2 id=\\\"conclussion\\\"><a href=\\\"#conclussion\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Conclussion</h2>\\n<p>We should always strive to refine and improve our codebases. Async/await can bring a lot of improvements and help us write more readable code, easier to argue about and to spot bugs. In case, you have to use still Promises, check out a <a href=\\\"http://2ality.com/2017/08/promise-callback-data-flow.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">wonderfull piece by Dr. Axel Rauschmayer</a> for more Promises and Async/Await patterns.</p>\\n<p>Node.js 8 is now in LTS mode, so you have no reasons not to upgrade and miss the shiny new features of Javascript.</p>\\n<p>Let me know what you think in the comments below and share this article with someone you know it would be helpfull to. 🤝</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/blog/async-await-a-thorough-example/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":6,\"frontmatter\":{\"date\":\"2017-11-24T09:40:42.000Z\",\"path\":\"/async-await-a-thorough-example/\",\"tags\":\"Node.js, AsyncAwait\",\"title\":\"Async/await - A thorough example\",\"draft\":null}}],\"tag\":\"AsyncAwait\",\"pagesSum\":1,\"page\":1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tag-asyncawait.json\n// module id = 634\n// module chunks = 149747205944066"],"sourceRoot":""}